name: Pull Request Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Lint with flake8
        run: |
          flake8 src/clippy --count --show-source --statistics --max-line-length=120


      - name: MyPy
        run: |
          mypy src/clippy --ignore-missing-imports

      - name: Install Boost
        uses: MarkusJx/install-boost@v2.4.5
        id: install-boost
        with:
          # REQUIRED: Specify the required boost version
          # A list of supported versions can be found here:
          # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
          boost_version: 1.83.0
          # OPTIONAL: Specify a platform version
          # platform_version: 18.04
          # OPTIONAL: Specify a custom install location
          boost_install_dir: /home/runner/work/boost
          # OPTIONAL: Specify a toolset
          toolset: gcc
          # OPTIONAL: Specify an architecture
          # arch: x86

      - name: Build backend
        id: build-backend
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
        run: |
          echo BOOST_ROOT is $BOOST_ROOT /end/
          sudo apt install doxygen
          TMPDIR=$(mktemp -d)
          git clone https://github.com/LLNL/clippy-cpp --branch $GITHUB_HEAD_REF $TMPDIR
          mkdir -p $TMPDIR/build
          cd $TMPDIR/build && cmake -DBOOST_ROOT=$BOOST_ROOT .. && make 
          ls -l $TMPDIR/build/test
          BACKEND=$TMPDIR/build/test
          echo "BACKEND=$BACKEND" >> $GITHUB_ENV

      - name: Pytest
        env:
          BACKEND: ${{ env.BACKEND }}
        run: |
          echo "backend = $BACKEND"
          pytest . --backend=$BACKEND
      # - name: Pytest
      #   run: |
      #     coverage run --source clippy/ -m pytest && coverage report -m --fail-under 99
